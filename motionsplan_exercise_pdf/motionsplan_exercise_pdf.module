<?php
require_once libraries_get_path('fpdf') . '/FPDF-1.6.0/fpdf.php';

class PDF_MC_Table extends FPDF
{
    var $widths;
    var $aligns;
    var $imgs;

    /**
     * Set the array of column width
     */
    function SetWidths($w)
    {
        $this->widths=$w;
    }

    /**
     * Set the array of column alignments
     */
    function SetAligns($a)
    {
        $this->aligns=$a;
    }

    function Row($data, $pics = array())
    {
        //Calculate the height of the row
        $pic_width = 15;
        $pic_height = 15;
        $nb=0;
        for($i=0;$i<count($data);$i++) {
            $nb=max($nb,$this->NbLines($this->widths[$i],$data[$i]));
        }
        $h=5*$nb;


        if ($first_col = $this->NbLines($this->widths[$i], $data[0]) * 5 + $pic_height >= $h AND !empty($pics)) {
            $h = $first_col * 5 + $pic_height + 6;
        }

        //Issue a page break first if needed
        $this->CheckPageBreak($h);
        //Draw the cells of the row
        for($i=0;$i<count($data);$i++) {
            $w=$this->widths[$i];
            $a=isset($this->aligns[$i]) ? $this->aligns[$i] : 'L';
            //Save the current position
            $x=$this->GetX();
            $y=$this->GetY();
            //Draw the border
            $this->Rect($x,$y,$w,$h);
            //Print the text
            $this->MultiCell($w,5,$data[$i],0,$a);

            $calc_x = $x + 1;
            $calc_y = $this->GetY();
            if (!empty($pics)) {
                if ($i==0) {
                    foreach ($pics as $pic) {
                        if (file_exists($pic)) {
                            $this->Image($pic, $calc_x, $calc_y, $pic_width, $pic_height);
                            $calc_x += $pic_width;
                        }
                    }  
                }
            }
            //Put the position to the right of the cell
            $this->SetXY($x+$w,$y);
        }

        //Go to the next line
        $this->Ln($h);
    }

    /**
     * If the height h would cause an overflow, add a new page immediately
     */
    function CheckPageBreak($h)
    {
        if ($this->GetY()+$h>$this->PageBreakTrigger) {
            $this->AddPage($this->CurOrientation);
        }
    }
  
    /**
     * Computes the number of lines a MultiCell of width w will take
     */
    function NbLines($w,$txt)
    {
        $cw=&$this->CurrentFont['cw'];
        if ($w==0) {
            $w=$this->w-$this->rMargin-$this->x;
        }
        $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
        $s=str_replace("\r",'',$txt);
        $nb=strlen($s);
        if ($nb>0 and $s[$nb-1]=="\n") {
            $nb--;
        }
        $sep=-1;
        $i=0;
        $j=0;
        $l=0;
        $nl=1;
        while($i<$nb) {
            $c=$s[$i];
            if ($c=="\n") {
                $i++;
                $sep=-1;
                $j=$i;
                $l=0;
                $nl++;
                continue;
            }
            if ($c==' ') {
                $sep=$i;
            }
            $l+=$cw[$c];
            if ($l>$wmax) {
                if ($sep==-1) {
                    if ($i==$j) {
                        $i++;
                    }
                } else {
                    $i=$sep+1;
                }
                $sep=-1;
                $j=$i;
                $l=0;
                $nl++;
            } else {
                $i++;
            }
        }
        return $nl;
    }

}

/**
 * Implementation of hook_menu()
 */ 
function motionsplan_exercise_pdf_menu() {
    $items['node/%node/pdf'] = array(
        'title' => 'PDF',
        'page callback' => 'exercise_pdf',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'access callback' => 'exercise_pdf_access',
        'access arguments' => array(1)
    );
    $items['node/%node/pdf2'] = array(
        'title' => 'PDF2',
        'page callback' => 'exercise_pdf_portrait',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'access callback' => 'exercise_pdf_access',
        'access arguments' => array(1)
    );    
    $items['exerciseprogram/print_compact/%/pdf'] = array(
        'title' => t('PDF'),
        'page callback' => 'exerciseprogram_print_compact_pdf',
        'page arguments' => array(2),
        'access callback' => true,
        'type' => MENU_CALLBACK,
    );    
    return $items;
}

function exercise_pdf_access($node) {
    if ($node->type != 'exercise') {
        return false;
    }
    return true;
}

/**
 * Creates a pdf of an exercise node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function exercise_pdf_portrait($node) {
    global $base_url;
    require_once libraries_get_path('fpdf') . '/FPDF-1.6.0/fpdf.php';

    $title = "  " . utf8_decode($node->title);
    $description = utf8_decode(strip_tags($node->field_exercise_intro[0]['value']));
    $keywords = array();
    foreach ($node->taxonomy as $taxonomy) {
        $keywords[] = $taxonomy->name;
    }

    $url = $base_url. '/node/' . $node->nid;

    $pdf = new FPDF('P','mm','A4');
    $pdf->SetTitle($title);
    $pdf->SetSubject($title);
    $pdf->SetAuthor('Motionsplan.dk');
    $pdf->SetAutoPageBreak(false);
    $pdf->SetMargins(0, 0, 0);    

    $pdf->AddPage();

    $title_size = 30;

    $pdf->SetFont('Helvetica', 'B', $title_size);

    $title_width = $pdf->GetStringWidth($title);
    
    if ($title_width > 200) {
        $title_size = 25;
    }
    
    $pdf->SetFont('Helvetica', 'B', $title_size);

    $pdf->SetFont('Helvetica', 'B', $title_size);
    $pdf->SetTextColor(255, 255, 255);
    $pdf->Cell(0, 50, $title, null, 2, 'L', true);
    
    $pdf->SetLeftMargin(10);
    $pdf->SetRightMargin(10);
    $pdf->SetY(35);
    $pdf->SetFont('Helvetica', null, 10);
    $pdf->MultiCell(0, 5, utf8_decode(implode($keywords, ", ")), 0, 'L');

    if (!empty($node->field_exercise_images)) {
        $x = 10;
        $y = 60;
        $width = 0;
        $spacing = 5;
        $count = 0;
        $picture_rows = 1;
        foreach ($node->field_exercise_images as $image) {
            $file = realpath(dirname(__FILE__) . '/../../../../../' . $image['filepath']);
            $size = getimagesize($file);
            if ($size[0] < $size[1]) {
                $orientation = 'portrait';
                $pic_width = 55;
                $new_line = 80;
                if ($count > 6) {
                    break;
                }
            } else {
                $orientation = 'landscape';
                $pic_width = 80;
                $new_line = 68;
                if ($count > 4) {
                    break;
                }
            }
            $width += $pic_width + $spacing;

            if ($width > 200) {
                $y += $new_line;
                $x = 10;
                $picture_rows++;
                $width = 0;
            }

            $pdf->Image($file,$x,$y,$pic_width,0,'');
            $x += $pic_width + $spacing;
        }
    }

    $pdf->SetFont('Helvetica', null, 17);
    $pdf->setTextColor(0, 0, 0);

    if ($orientation == 'portrait') {
        if ($picture_rows == 1) {
            $pdf->setY(150);
        } else {
            $pdf->setY(230);
        }
    } else {
        if ($picture_rows == 1) {
            $pdf->setY(125);
        } else {
            $pdf->setY(195);
        }
    }

    $pdf->MultiCell(0, 8, $description, 0);

    $pdf->Image(dirname(__FILE__) . '/../../../themes/motionsplan/logo.png',8,270,50,0,'', 'http://motionsplan.dk/');
    $pdf->Image(dirname(__FILE__) . '/cc-by-sa_340x340.png',190,3,17,0,'');

    $pdf->SetFont('Helvetica', null, 8);
    $pdf->setY(280);
    $pdf->setX(6);
    $pdf->MultiCell(50, 8, $url, 0, 'C');

    $image_url = "http://chart.apis.google.com/chart?cht=qr&chs=100x100&chl=" . $url;
  
    $ch = curl_init();
    $timeout = 0;
    curl_setopt ($ch, CURLOPT_URL, $image_url);
    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);

    // Getting binary data
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);

    $image = curl_exec($ch);

    curl_close($ch);

    $f = fopen(dirname(__FILE__) . '/barcodes/'. md5(request_uri()) . '.png', 'w');
    fwrite($f, $image);
    fclose($f);

    $pdf->Image(dirname(__FILE__) . '/barcodes/' . md5(request_uri()) . '.png', 160, 245, 45, 0, '');

    $pdf->Output();
}

/**
 * Creates a pdf of an exercise node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function exercise_pdf_landscape($node) {
    global $base_url;
    require_once libraries_get_path('fpdf') . '/FPDF-1.6.0/fpdf.php';

    $title = utf8_decode($node->title);
    $description = utf8_decode(strip_tags($node->field_exercise_intro[0]['value']));
    $keywords = array();
    foreach ($node->taxonomy as $taxonomy) {
        $keywords[] = $taxonomy->name;
    }

    $url = $base_url. '/node/' . $node->nid;

    $pdf = new FPDF('L','mm','A4');
    $pdf->SetTitle($title);
    $pdf->SetSubject('');
    $pdf->SetAuthor('Motionsplan.dk');
    $pdf->SetAutoPageBreak(false);

    $pdf->AddPage();
    $pdf->SetFont('Helvetica', 'B', 26);
    $pdf->setTextColor(255, 255, 255);
    $pdf->Cell(0, 22, $title, null, 2, 'C', true);

    $pdf->SetFont('Helvetica', null, 17);
    $pdf->setTextColor(0, 0, 0);
    $pdf->setY(40);

    $pdf->MultiCell(200, 8, $description, 0);

    if (!empty($node->field_exercise_images)) {
        $x = 10;
        $y = 80;
        $width = 0;
        $spacing = 5;
        $count = 0;
        foreach ($node->field_exercise_images as $image) {
            $file = realpath(dirname(__FILE__) . '/../../../../../' . $image['filepath']);
            $size = getimagesize($file);
            if ($size[0] < $size[1]) {
                // portrait
                $pic_width = 35;
                $new_line = 60;
                if ($count > 10) {
                    break;
                }
            } else {
                // landscape
                $pic_width = 55;
                $new_line = 50;
                if ($count > 6) {
                    break;
                }
            }
            $width += $pic_width + $spacing;

            if ($width > 200) {
                $y += $new_line;
                $x = 10;
            }

            $pdf->Image($file,$x,$y,$pic_width,0,'');
            $x += $pic_width + $spacing;
        }
    }

    $pdf->Line(220, 30, 220, 220);

    $pdf->Image(dirname(__FILE__) . '/vih_logo.jpg',240,120,32,0,'', 'http://vih.dk/');
    $pdf->Image(dirname(__FILE__) . '/../../../themes/motionsplan/logo.png',235,180,50,0,'', 'http://motionsplan.dk/');

    $pdf->Image(dirname(__FILE__) . '/cc-by-sa_340x340.png',12,12,17,0,'');

    $pdf->setY(168);
    $pdf->SetFont('Helvetica', null, 10);

    $pdf->setY(40);
    $pdf->setX(233);

    $pdf->MultiCell(40, 5, utf8_decode(implode($keywords, "\n")), 0, 'C');

    $pdf->SetFont('Helvetica', null, 8);
    $pdf->setY(190);
    $pdf->setX(230);
    $pdf->MultiCell(60, 8, $url, 0, 'C');

    $image_url = "http://chart.apis.google.com/chart?cht=qr&chs=100x100&chl=" . $url;
  
    $ch = curl_init();
    $timeout = 0;
    curl_setopt ($ch, CURLOPT_URL, $image_url);
    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);

    // Getting binary data
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);

    $image = curl_exec($ch);

    curl_close($ch);

    $f = fopen(dirname(__FILE__) . '/barcodes/'. md5(request_uri()) . '.png', 'w');
    fwrite($f, $image);
    fclose($f);

    $pdf->Image(dirname(__FILE__) . '/barcodes/' . md5(request_uri()) . '.png', 235, 135, 45, 0, '');

    $pdf->Output();
}

function exerciseprogram_print_compact_pdf() {
    global $base_path;
    $nids = exerciseprogram_get_nids(arg(2));
    if (sizeof($nids)<=0) {
        return '<strong>Du skal tilføje øvelser for at kunne udskrive</strong>';
    }
    
    $sql = "SELECT name, description FROM {exercise_program} WHERE pid = %d";
    $r = db_fetch_array(db_query($sql,arg(2)));

    $title = utf8_decode($r['name']);
    $description = utf8_decode($r['description']);

    $pdf=new PDF_MC_Table();
    $pdf->SetTitle($title);
    $pdf->SetSubject('');
    $pdf->SetAuthor('Motionsplan.dk');
    $pdf->SetAutoPageBreak(false);

    $pdf->AddPage();
    $pdf->SetFont('Helvetica', 'B', 20);
    $pdf->Cell(0, 10, $title, null, 2, 'L', false);
    $pdf->Image(dirname(__FILE__) . '/../../../themes/motionsplan/logo.png',150,8,50,0,'', 'http://motionsplan.dk/');
    $pdf->setTextColor(0, 0, 0);

    $pdf->SetFont('Helvetica', null, 10);
    $pdf->MultiCell(180, 6, $description, 0);

    $pdf->SetY($pdf->GetY()+2);

    // table starts
    $pdf->SetWidths(array(50,70,70));
    $pdf->SetFont('Helvetica', 'B', 10);
    $pdf->Row(array(utf8_decode('Øvelse'), utf8_decode('Beskrivelse'), utf8_decode('Kommentar')));
    $pdf->SetFont('Helvetica', null, 10);

    $presetname = 'exercisePictureCompact';
    $preset = imagecache_preset_by_name($presetname);

    foreach($nids as $no => $eid) {
        $e = node_load($eid);

	$imgs = array();
	foreach($e->field_exercise_images as $img) {
            if (empty($img['filepath'])) { 
                continue; 
            }
            $src = $img["filepath"];
            $dst = imagecache_create_path($presetname, $src);
            if (file_exists($dst) || imagecache_build_derivative($preset['actions'], $src, $dst)) {
                $imgs[] = $dst;
            }
        }
	if (sizeof($imgs) > 3) {
            $tmp_imgs = array();
            $tmp_imgs[] = $imgs[0];
            $tmp_imgs[] = $imgs[floor(sizeof($imgs)/2)];
            $tmp_imgs[] = $imgs[sizeof($imgs)-1];
            $imgs = $tmp_imgs;
        }

        $pdf->Row(array(utf8_decode($e->title), utf8_decode($e->field_exercise_intro[0]['value']), ''), $imgs); 
    }

    $pdf->Output();
}
